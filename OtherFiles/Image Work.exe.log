
--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11176, функция: bool {anonymous}::TX::txBitBlt(HDC, double, double, double, double, HDC, double, double),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xFE4 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041F89E in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txBitBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11176)
# 1 0x0041FD7D in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txBitBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11192)

# 2 0x00426907 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (10):

      8:     if (Sktr == NULL) printf ("Image isn't found");
      9: 
=>   10:     txBitBlt (400, 300, Sktr);
     11: 
     12:     txDeleteDC (Sktr);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txBitBlt(HDC, double, double, double, double, HDC, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11176):

  11174:     {
  11175: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11176: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11177: 
  11178: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txBitBlt(double, double, HDC, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11192):

  11190: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11191: 
=>11192: $   return txBitBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource);
  11193:     }
  11194: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (10):

      8:     if (Sktr == NULL) printf ("Image isn't found");
      9: 
=>   10:     txBitBlt (400, 300, Sktr);
     11: 
     12:     txDeleteDC (Sktr);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun  6 2018 18:34:04, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 06 2018 18:34:07

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xCF8 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 13:50:25, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 13:50:28

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0x75C (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 13:50:45, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 13:50:48

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xBB0 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 13:51:22, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 13:51:25

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xEE8 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 13:51:34, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 13:51:38

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xB94 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:35:53, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:35:58

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#2: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xB94 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B6B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:         {
     13:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     15:         txSleep (10);
     16: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:35:53, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:35:59

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11201, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0x584 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x0041FDCD in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11201)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426B7D in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:         {
     14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11201):

  11199:     {
  11200: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11201: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11202: 
  11203: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (15):

     13:         {
     14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
=>   15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);
     17: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:36:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:36:59

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xB00 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426AEA in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:37:50, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:37:54

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xF30 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426AEA in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:38:54, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:38:57

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xB04 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426AEA in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:40:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:40:45

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xE34 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426AEA in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:40:53, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:40:57

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xFB8 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426AEA in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (txMouseX(), txMouseY(), Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:42:06, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:42:10

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0x980 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x00420114 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x0042099B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426C34 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txBitBlt (txMouseX(), txMouseY(), Skt, 0, 0);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (txMouseX(), txMouseY(), Sktr, 0, 0, TX_WHITE);
     15:         txBitBlt (txMouseX(), txMouseY(), Skt, 0, 0);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:43:53, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:43:56

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0xF90 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x00420114 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x0042099B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x00426BE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (0, 0, Sktr, 0, 0, TX_WHITE);
     15:         txBitBlt (txMouseX(), txMouseY(), Skt, 0, 0);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (0, 0, Sktr, 0, 0, TX_WHITE);
     15:         txBitBlt (txMouseX(), txMouseY(), Skt, 0, 0);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:46:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:46:04

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11214, функция: bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF),

Сообщение: Прямоугольник копируемой области {0, 1.67772e+007, 730, 1.67779e+007} не полностью лежит внутри изображения-источника {0, 0, 730, 644}, функция txTransparentBlt() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdRe0, Thread: 0x7F8 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11213) bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF).

--------------------------------------------------
Стек вызовов:

# 0 0x0041FFC9 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11214)
# 1 0x00420850 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txTransparentBlt() at C:/Users/Misha/Desktop/TX/TXLib.h (11244)

# 2 0x0042696A in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (0, 0, Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (0, 0, Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txTransparentBlt(HDC, double, double, double, double, HDC, double, double, COLORREF) at C:\Users\Misha\Desktop\TX\TXLib.h (11213):

  11211:         {
  11212: $       SetLastError (ERROR_INVALID_DATA);
=>11213: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11214:                   "функция txTransparentBlt() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11215:         }

# 1 in bool {anonymous}::TX::txTransparentBlt(double, double, HDC, COLORREF, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11244):

  11242: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11243: 
=>11244: $   return txTransparentBlt (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
  11245:     }
  11246: 

# 2 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (14):

     12:     while (!GetAsyncKeyState ('C'))
     13:         {
=>   14:         txTransparentBlt (0, 0, Sktr, 0, 0, TX_WHITE);
     15:         txTransparentBlt (0, 0, Skt, 0, 0, TX_WHITE);
     16:         txSleep (10);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 18:51:23, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 18:51:26

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261C4F в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018FD3BC. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#3: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdrE0, Thread: 0xE00 (Main). 

--------------------------------------------------
Стек вызовов:

# 1 0x770398DA in C:\Windows\system32\msvcrt.dll: free()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9883):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTr   7229:         { $ _txConsole_Detach (waitableParent && !externTerm); }
   72   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &   7086:     if (retcode != 0) txOutputDebugPrintf ("%s - WARNING: %s (%d) called\n", _TX_VERSION, __func__, retcode);
   7087: 
=> 7088: $1  _txCleanup();
   7089: 
   7090:     Win32::exit (retcode);

# 3 in unsigned int {anonymous}::TX::_txCanvas_ThreadProc(void*) at C:\Users\Misha\Des  11299:                           double xSource /*= 0*/, double ySource /*= 0*/, double alpha /*= 1.0*/)
  11300:     {
=>11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
  11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);

# 3 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (18):

     16:         {
     17:         txAlphaBlend (txMouseX(), txMouseY(), Sktr, 0, 0);
=>   18:         txAlphaBlend (SktX, SktY, Skt, 0, 0);
     19:         txSleep (10);
     20: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 19:26:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 19:26:47

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261C4F в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018FD3BC. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#4: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdrE0, Thread: 0xEA0 (Canvas), GetLastError(): 87 (Параметр задан неверно), errno: 22 (Invalid argument). 

--------------------------------------------------
Стек вызовов:

# 1 0x770398DA in C:\Windows\system32\msvcrt.dll: free()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):



--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 19:26:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 19:26:47

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261C4F в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018FD3BC. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300], Instance: 0x004FE2C0 (32-bit), Flags: CMdrE0, Thread: 0xE00 (Main). 

--------------------------------------------------
Стек вызовов:

# 1 0x770398DA in C:\Windows\system32\msvcrt.dll: free()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 2 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11301):

  11299:                           double xSource /*= 0*/, double ySource /*= 0*/, double alpha /*= 1.0*/)
  11300:     {
=>11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
  11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);

# 3 in int main() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (18):

     16:         {
     17:         txAlphaBlend (txMouseX(), txMouseY(), Sktr, 0, 0);
=>   18:         txAlphaBlend (SktX, SktY, Skt, 0, 0);
     19:         txSleep (10);
     20: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-03-19 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 11 2018 19:26:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 11 2018 19:26:47

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11253, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0x514 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x004208B1 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11253)
# 1 0x00421758 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426C8D in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (53):

     51: 
     52: 
=>   53:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     54:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
     55:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);

# 3 0x00426A50 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11253):

  11251:     {
  11252: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11253: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11254: 
  11255: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (53):

     51: 
     52: 
=>   53:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     54:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
     55:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 27 2018 18:23:06, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 27 2018 18:23:09

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11253, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0xE64 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x004208B1 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11253)
# 1 0x00421758 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426C8D in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (53):

     51: 
     52: 
=>   53:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     54:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
     55:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);

# 3 0x00426A50 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11253):

  11251:     {
  11252: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11253: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11254: 
  11255: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (53):

     51: 
     52: 
=>   53:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     54:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
     55:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jun 27 2018 18:23:50, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jun 27 2018 18:23:52

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11253, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Параметр "sourceImage" неверен. Возможно, этот холст не создан, или уже уничтожен, или не загрузилась картинка.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0x900 (Main), GetLastError(): 13 (Недопустимые данные). 

--------------------------------------------------
Стек вызовов:

# 0 0x004208B1 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11253)
# 1 0x00421758 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426E00 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (66):

     64:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     65:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
=>   66:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);
     67:         txSetFillColor (TX_NULL);
     68:         txSetColor (TX_PINK, 5);

# 3 0x00426A50 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11253):

  11251:     {
  11252: $1  if (_TX_HDC_FAILED (destImage))   return false;
=>11253: $   if (_TX_HDC_FAILED (sourceImage)) return false;
  11254: 
  11255: $   POINT size = txGetExtent (sourceImage);

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (66):

     64:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     65:         txAlphaBlend (SktrX-334, SktrY-639, Sktr, 0, 0);
=>   66:         txAlphaBlend (SktX-270, SktY-13, Skt, 0, 0);
     67:         txSetFillColor (TX_NULL);
     68:         txSetColor (TX_PINK, 5);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul  8 2018 18:50:38, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 08 2018 18:50:42

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {730, 0, 2190, 644} не полностью лежит внутри изображения-источника {0, 0, 1460, 644}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0x6BC (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)
# 1 0x0042176B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426DD4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (73):

     71:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     72: 
=>   73:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     74: 
     75:         //if (t % 2)

# 3 0x00426A62 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (73):

     71:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     72: 
=>   73:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     74: 
     75:         //if (t % 2)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 11 2018 18:28:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 11 2018 18:28:45

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {730, 0, 2190, 644} не полностью лежит внутри изображения-источника {0, 0, 1460, 644}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0x874 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)
# 1 0x0042176B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426DE7 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

# 3 0x00426A62 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 11 2018 18:32:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 11 2018 18:32:04

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {730, 0, 2190, 644} не полностью лежит внутри изображения-источника {0, 0, 1460, 644}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0xCBC (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)
# 1 0x0042176B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426DE7 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

# 3 0x00426A62 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 11 2018 18:32:40, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 11 2018 18:32:44

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {730, 0, 2190, 644} не полностью лежит внутри изображения-источника {0, 0, 1460, 644}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0x7C4 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)
# 1 0x0042176B in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11303)

# 2 0x00426DD8 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in bool {anonymous}::TX::txAlphaBlend(double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11303):

  11301: $1  if (_TX_TXWINDOW_FAILED()) return false;
  11302: 
=>11303: $   return txAlphaBlend (txDC(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
  11304:     }
  11305: 

# 2 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (75):

     73:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     74: 
=>   75:         txAlphaBlend (SktrX-334, SktrY-639, Sktr2, Sktr2x, 0);
     76: 
     77:         //if (t % 2)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 11 2018 18:34:18, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 11 2018 18:34:22

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {272, 0, 440, 100} не полностью лежит внутри изображения-источника {0, 0, 336, 100}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0xA78 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x004271AE in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (113):

    111:         int Dist = Distance (SktrX, SktrY, SktX, SktY);
    112: 
=>  113:         txAlphaBlend (txDC (), MashX, MashY, Mash2, 0, Mash, t / 5 % 2 * 272, 0);
    114: 
    115:         /*

# 2 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (113):

    111:         int Dist = Distance (SktrX, SktrY, SktX, SktY);
    112: 
=>  113:         txAlphaBlend (txDC (), MashX, MashY, Mash2, 0, Mash, t / 5 % 2 * 272, 0);
    114: 
    115:         /*

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 22 2018 20:35:11, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 22 2018 20:35:15

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {2190, 0, 3650, 644} не полностью лежит внутри изображения-источника {0, 0, 2920, 644}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x004FF2C0 (32-bit), Flags: CMdRe0, Thread: 0xD2C (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x00426F82 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (95):

     93:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     94: 
=>   95:         txAlphaBlend (txDC (), SktrX-334, SktrY-639, Sktr2x, 0, Sktr2, t / 5 % 4 * 730, 0);
     96: 
     97:         txAlphaBlend (txDC (), Catx, Caty, Catt, 0, Cat, t / 30 % 2 * 1300, 0);

# 2 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (15):

     13:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     14: 
=>   15:     Moving ();
     16:     }
     17: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (95):

     93:         txAlphaBlend (SktrPx, SktrPy, SktrP, 0, 0);
     94: 
=>   95:         txAlphaBlend (txDC (), SktrX-334, SktrY-639, Sktr2x, 0, Sktr2, t / 5 % 4 * 730, 0);
     96: 
     97:         txAlphaBlend (txDC (), Catx, Caty, Catt, 0, Cat, t / 30 % 2 * 1300, 0);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Jul 25 2018 18:25:13, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Jul 25 2018 18:25:15

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#115: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77745F1B в функции wcsnicmp(). Попытка прочесть данные по адресу 0x80000000. Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0x1490 (Canvas). 

--------------------------------------------------
Стек вызовов:

# 0 0x77745F1B in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 1 0x77745AE0 in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 2 0x75B4ADE8 in C:\Windows\system32\msvcrt.dll: towlower()
# 3 0x75B4C470 in C:\Windows\system32\msvcrt.dll: calloc()
# 4 0x662524E6 in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 5 0x7774EB73 in C:\Windows\SYSTEM32\ntdll.dll: RtlConsoleMultiByteToUnicodeN()
# 6 0x777356F4 in C:\Windows\SYSTEM32\ntdll.dll: ZwCreateSection()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

# 7 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#16 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#19 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#28 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#30 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#40 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#41 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#42 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#43 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#44 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#52 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#53 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#54 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#55 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#56 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  5 2018 18:22:33, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 05 2018 18:22:37

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#115: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77745F1B в функции wcsnicmp(). Попытка прочесть данные по адресу 0x80000000. Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0x1490 (Canvas). 

--------------------------------------------------
Стек вызовов:

# 0 0x77745F1B in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 1 0x77745AE0 in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 2 0x75B4ADE8 in C:\Windows\system32\msvcrt.dll: towlower()
# 3 0x75B4C470 in C:\Windows\system32\msvcrt.dll: calloc()
# 4 0x662524E6 in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 5 0x7774EB73 in C:\Windows\SYSTEM32\ntdll.dll: RtlConsoleMultiByteToUnicodeN()
# 6 0x777356F4 in C:\Windows\SYSTEM32\ntdll.dll: ZwCreateSection()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

# 7 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#16 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#19 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#28 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#30 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#40 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#41 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#42 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#43 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#44 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#52 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#53 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#54 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#55 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#56 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  5 2018 18:22:33, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 05 2018 18:22:37

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#117: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77745F1B в функции wcsnicmp(). Попытка прочесть данные по адресу 0x80000000. Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0x1490 (Canvas). 

--------------------------------------------------
Стек вызовов:

# 0 0x77745F1B in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 1 0x77745AE0 in C:\Windows\SYSTEM32\ntdll.dll: wcsnicmp()
# 2 0x75B4ADE8 in C:\Windows\system32\msvcrt.dll: towlower()
# 3 0x75B4C470 in C:\Windows\system32\msvcrt.dll: calloc()
# 4 0x662524E6 in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 5 0x7774EB73 in C:\Windows\SYSTEM32\ntdll.dll: RtlConsoleMultiByteToUnicodeN()
# 6 0x777356F4 in C:\Windows\SYSTEM32\ntdll.dll: ZwCreateSection()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in void {anonymous}::TX::_txOnFatalExit(int) at C:\Users\Misha\Desktop\TX\TXLib.h (7121):

   7119:     txOutputDebugPrintf ("%s - WARNING: %s (%u) called\n", _TX_VERSION, __func__, retcode);
   7120: 
=> 7121: $1  _txCleanup();
   7122: 
   7123:     _TX_CALLv (Win32::FatalExit, (retcode));

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

# 8 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#11 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#20 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#23 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in int {anonymous}::TX::_txStackWalk(int, size_t, void**, long unsigned int*, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9723):

   9721: $   for (n = -framesToSkip; n < (int) szCapture; n++)
   9722:         {
=> 9723: $       DWORD64 prev = frame.AddrStack.Offset;
   9724: 
   9725:         // Я злой и страшный серый walk. Я в поросятах знаю talk.

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9579):

   9577: 
   9578: $   static void* capture [maxFrames] = {};
=> 9579: $   int frames = _txStackWalk (framesToSkip + !context, SIZEARR (capture), capture, NULL, context, thread);
   9580: 
   9581: $   memset (trace, 0, sizeof (trace));

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9851):

   9849: 
   9850: $       SetLastError (0);
=> 9851: $       (_TX_CALL (MinGW::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(l)) ||
   9852:         (_TX_CALL (Win32::SymGetLineFromAddr64, (process, (uintptr_t) addr, &ofs, &line64)) && RES_(L)) ||
   9853:             DBG_("SymGetLineFromAddr64 (\"%s\") failed", (symbol? (*symbol)->Name : "(null)"));

#35 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#36 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#44 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#45 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#46 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#47 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#48 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#53 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#54 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#55 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#56 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#57 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#58 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

#59 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

#60 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at C:\Users\Misha\Desktop\TX\TXLib.h (9094):

   9092: $       unsigned err = GetLastError();
   9093: 
=> 9094: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord);
   9095: 
   9096: $       _txDumpExceptionSEH (_txDumpSE,  (ptrdiff_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#61 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  5 2018 18:22:33, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 05 2018 18:22:37

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {7080, 0, 8780, 1100} не полностью лежит внутри изображения-источника {0, 0, 6800, 1100}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdRe0, Thread: 0xD08 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x00428139 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Drawing() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), SktrPx, SktrPy, SktrPX, 0, SktrP, *t / 35 % 4 * 2360, 0);
    301:         }
    302: 

# 2 0x00426FBC in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (125):

    123:                  Bench, BenchX,
    124:                  City,  CityX,
=>  125:                  Frames, &Level, &t);
    126: 
    127: 

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (22):

     20:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     21: 
=>   22:     Moving ();
     23:     }
     24: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Drawing(HDC, int, int, int, HDC, int, HDC, int, int, int*, int*) at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), SktrPx, SktrPy, SktrPX, 0, SktrP, *t / 35 % 4 * 2360, 0);
    301:         }
    302: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 18:50:40, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 18:50:43

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {6800, 0, 8500, 1100} не полностью лежит внутри изображения-источника {0, 0, 6800, 1100}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdRe0, Thread: 0x840 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x00428139 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Drawing() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), SktrPx, SktrPy, SktrPX, 0, SktrP, *t / 35 % 4 * 3400, 0);
    301:         }
    302: 

# 2 0x00426FBC in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (125):

    123:                  Bench, BenchX,
    124:                  City,  CityX,
=>  125:                  Frames, &Level, &t);
    126: 
    127: 

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (22):

     20:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     21: 
=>   22:     Moving ();
     23:     }
     24: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Drawing(HDC, int, int, int, HDC, int, HDC, int, int, int*, int*) at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), SktrPx, SktrPy, SktrPX, 0, SktrP, *t / 35 % 4 * 3400, 0);
    301:         }
    302: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 18:52:48, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 18:52:51

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261DB8 в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018AD400. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#3: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0xCA0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x6625423F in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9883):

   9881:         {
   9882: $       SetLastError (0);
=> 9883: $       (_TX_CALL (MinGW::SymCleanup, (process)) && RES_(u)) || DBG_("MinGW::SymCleanup() failed");
   9884: $       (_TX_CALL (Win32::SymCleanup, (process)) && RES_(U)) || DBG_("Win32::SymCleanup() failed");
   9885: 

# 1 in void {anonymous}::TX::_txCleanup() at C:\Users\Misha\Desktop\TX\TXLib.h (7231):

   7229:         { $ _txConsole_Detach (waitableParent && !externTerm); }
   72   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &   7086:     if (retcode != 0) txOutputDebugPrintf ("%s - WARNING: %s (%d) called\n", _TX_VERSION, __func__, retcode);
   7087: 
=> 7088: $1  _txCleanup();
   7089: 
   7090:     Win32::exit (retcode);

# 3 in unsigned int {anonymous}::TX::_txC  10767: bool txClear (HDC dc /*= txDC()*/)
  10768:     {
=>10769: $1  if (_TX_DEFAULT_HDC_FAILED (dc)) return false;
  10770: 
  10771: $   POINT size = txGetExtent (dc);

# 3 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (120):

    118:         txSetFillColor (TX_BLACK);
    119: 
=>  120:         txClear();
    121: 
    122:         Drawing (SktrP, SktrPx, SktrPy, SktrPX,

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 18:55:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 18:55:03

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261DB8 в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018AD400. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#4: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0xC60 (Canvas), GetLastError(): 87 (Параметр задан неверно). 

--------------------------------------------------
Стек вызовов:

# 0 0x6625423F in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):



--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 18:55:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 18:55:03

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#2: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x66261DB8 в функции SymGetLineFromAddrW64(). Попытка прочесть данные по адресу 0x018AD400. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdrE0, Thread: 0xCA0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x6625423F in C:\Users\Misha\Desktop\TX\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at C:\Users\Misha\Desktop\TX\TXLib.h (9832):

   9830: 
   9831: $       SetLastError (0);
=> 9832: $       (_TX_CALL (MinGW::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(y)) ||
   9833:         (_TX_CALL (Win32::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym)) && RES_(Y)) ||
   9834:             DBG_("SymFromAddr (0x%p) failed", addr);

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, HANDLE) at C:\Users\Misha\Desktop\TX\TXLib.h (9596):

   9594: $       bool                    inTX   = false;
   9595: 
=> 9596:         if (addr)                { $ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
   9597:         if (readSource && !inTX) { $        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }
   9598: 

# 2 in bool {anonymous}::TX::txClear(HDC) at C:\Users\Misha\Desktop\TX\TXLib.h (10769):

  10767: bool txClear (HDC dc /*= txDC()*/)
  10768:     {
=>10769: $1  if (_TX_DEFAULT_HDC_FAILED (dc)) return false;
  10770: 
  10771: $   POINT size = txGetExtent (dc);

# 3 in void Moving() at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (120):

    118:         txSetFillColor (TX_BLACK);
    119: 
=>  120:         txClear();
    121: 
    122:         Drawing (SktrP, SktrPx, SktrPy, SktrPX,

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 18:55:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 18:55:03

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {5100, 0, 6780, 1100} не полностью лежит внутри изображения-источника {0, 0, 6720, 1100}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdRe0, Thread: 0x544 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x00428126 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Drawing() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), 0, 0, SktrPX, 0, SktrP, *t / 10 % 4 * 1700, 0);
    301:         }
    302: 

# 2 0x00426FBC in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (125):

    123:                  Bench, BenchX,
    124:                  City,  CityX,
=>  125:                  Frames, &Level, &t);
    126: 
    127: 

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (22):

     20:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     21: 
=>   22:     Moving ();
     23:     }
     24: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Drawing(HDC, int, int, int, HDC, int, HDC, int, int, int*, int*) at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (300):

    298:     if (*Level == 1)
    299:         {
=>  300:         txAlphaBlend (txDC (), 0, 0, SktrPX, 0, SktrP, *t / 10 % 4 * 1700, 0);
    301:         }
    302: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug  8 2018 19:04:50, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 08 2018 19:04:54

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {1680, 0, 2520, 1050} не полностью лежит внутри изображения-источника {0, 0, 1680, 1050}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdRe0, Thread: 0x12C8 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x004282BC in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Drawing() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (310):

    308:     if (*Level == 3)
    309:         {
=>  310:         txAlphaBlend (txDC (), 0, 0, CityX, 0, City, *t / 35 % 2 * 1680 , 0);
    311:         }
    312:     }

# 2 0x00426FC5 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (125):

    123:                  Bench, BenchX,
    124:                  City,  CityX,
=>  125:                  Frames, &Level, &t);
    126: 
    127: 

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (22):

     20:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     21: 
=>   22:     Moving ();
     23:     }
     24: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Drawing(HDC, int, int, int, HDC, int, HDC, int, int, int*, int*) at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (310):

    308:     if (*Level == 3)
    309:         {
=>  310:         txAlphaBlend (txDC (), 0, 0, CityX, 0, City, *t / 35 % 2 * 1680 , 0);
    311:         }
    312:     }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug 15 2018 18:09:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 15 2018 18:09:59

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------

--------------------------------------------------
TXLib сообщает:

Программа: \\vmware-host\Shared Folders\Windows 7\Image Work.exe, файл: C:\Users\Misha\Desktop\TX\TXLib.h, строка: 11266, функция: bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double),

Сообщение: Прямоугольник копируемой области {1680, 0, 2520, 1050} не полностью лежит внутри изображения-источника {0, 0, 1680, 1050}, функция txAlphaBlend() работать не будет.

#1: TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300], Instance: 0x005002C0 (32-bit), Flags: CMdRe0, Thread: 0x15A8 (Main), GetLastError(): 13 (Недопустимые данные). 
From: C:\Users\Misha\Desktop\TX\TXLib.h (11265) bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double).

--------------------------------------------------
Стек вызовов:

# 0 0x00420AE4 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: txAlphaBlend() at C:/Users/Misha/Desktop/TX/TXLib.h (11266)

# 1 0x004282BC in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Drawing() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (310):

    308:     if (*Level == 3)
    309:         {
=>  310:         txAlphaBlend (txDC (), 0, 0, CityX, 0, City, *t / 35 % 2 * 1680, 0);
    311:         }
    312:     }

# 2 0x00426FC5 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: Moving() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (125):

    123:                  Bench, BenchX,
    124:                  City,  CityX,
=>  125:                  Frames, &Level, &t);
    126: 
    127: 

# 3 0x00426A53 in \\vmware-host\Shared Folders\Windows 7\Image Work.exe: main() at //vmware-host/Shared Folders/Windows 7/Image Work.cpp (22):

     20:     txCreateWindow (GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN));
     21: 
=>   22:     Moving ();
     23:     }
     24: 

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::txAlphaBlend(HDC, double, double, double, double, HDC, double, double, double) at C:\Users\Misha\Desktop\TX\TXLib.h (11265):

  11263:         {
  11264: $       SetLastError (ERROR_INVALID_DATA);
=>11265: $       TX_ERROR ("Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, "
  11266:                   "функция txAlphaBlend() работать не будет." _ xSource _ ySource _ xSource + width _ ySource + height _ 0 _ 0 _ size.x _ size.y);
  11267:         }

# 1 in void Drawing(HDC, int, int, int, HDC, int, HDC, int, int, int*, int*) at \\vmware-host\Shared Folders\Windows 7\Image Work.cpp (310):

    308:     if (*Level == 3)
    309:         {
=>  310:         txAlphaBlend (txDC (), 0, 0, CityX, 0, City, *t / 35 % 2 * 1680, 0);
    311:         }
    312:     }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 105, Date: 2018-06-12 00:00:00 +0300]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	C:\Users\Misha\Desktop\TX\TXLib.h
Compiled:	Aug 15 2018 18:11:06, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Aug 15 2018 18:11:09

Run file:	\\vmware-host\Shared Folders\Windows 7\Image Work.exe
Directory:	\\vmware-host\Shared Folders\Windows 7

--------------------------------------------------
